// <auto-generated />
using System;
using AuditTrail.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuditTrail.Domain.Migrations
{
    [DbContext(typeof(AuditTrailDataContext))]
    [Migration("20250408015724_InitAuditTrail")]
    partial class InitAuditTrail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuditTrail.Domain.Models.AuditTrailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("Action");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("EntityId");

                    b.Property<int?>("EntityType")
                        .HasColumnType("integer")
                        .HasColumnName("EntityType");

                    b.Property<int?>("ExceptionType")
                        .HasColumnType("integer")
                        .HasColumnName("ExceptionType");

                    b.Property<string>("Message")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("Message");

                    b.Property<string>("NewValue")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("NewValue");

                    b.Property<string>("OldValue")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("OldValue");

                    b.Property<string>("Payload")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Payload");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<string>("Uri")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Uri");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("AuditTrail", "Logs");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AuditTrail.Domain.Models.AuditTrailArchiveEntity", b =>
                {
                    b.HasBaseType("AuditTrail.Domain.Models.AuditTrailEntity");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("AuditTrailArchive", "Logs");
                });

            modelBuilder.Entity("AuditTrail.Domain.Models.AuditTrailArchiveEntity", b =>
                {
                    b.HasOne("AuditTrail.Domain.Models.AuditTrailEntity", null)
                        .WithOne()
                        .HasForeignKey("AuditTrail.Domain.Models.AuditTrailArchiveEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
